@page "/generator"

@using Objects

@inject User currentUser
@inject UsersDbContext db

<h1>Solve problems, earn points.</h1>
<content>
    <form @onsubmit=Enter>
        <br />
        <h1>@problemToDisplay</h1>
        <input class="input-short" type="text" onkeydown="Enter" @bind=@userInput />
        <button class="btn btn-success" @onclick="Enter">ENTER</button>
        <br />
    </form>
    <h4>Level: @level Exp: @exp/@expForNextLevel</h4>
    <h3>@msg</h3>
</content>


@code {
    int level;
    int exp;
    int expForNextLevel;

    string userInput = "";
    string problemToDisplay = "";
    string msg = "";

    void Enter()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            if (IsLoggedIn())
            {
                if (IsAnswerCorrect())
                {
                    currentUser.Exp += currentUser.ProblemScore;

                    // the action of incrementing level
                    if (currentUser.Exp >= currentUser.ExpForNextLevel)
                    {
                        currentUser.Exp = 0;
                        currentUser.Level += 1;

                        int level = currentUser.Level;
                        var levelsMap = User.LevelsMap;

                        if (level > levelsMap.Count)
                            currentUser.ExpForNextLevel = levelsMap[levelsMap.Count].Item4;
                        else currentUser.ExpForNextLevel = levelsMap[level].Item4;
                    }

                    currentUser.CreateMathProblem();

                    msg = "Correct";
                }
                else
                {
                    if (currentUser.Exp < 10) currentUser.Exp = 0;
                    else currentUser.Exp -= 10;

                    db.SaveChanges();

                    msg = "Incorrect";
                }

                Update();
            }
            else
            {
                NotLoggedInAlert();
            }

        }
    }

    bool IsAnswerCorrect()
    {
        string answer = currentUser.ProblemAnswer.ToString();

        return (userInput == answer);
    }

    bool IsLoggedIn()
    {
        return !string.IsNullOrEmpty(currentUser.Username);
    }

    void Update()
    {
        if (IsLoggedIn())
        {
            level = currentUser.Level;
            exp = currentUser.Exp;
            expForNextLevel = currentUser.ExpForNextLevel;
            problemToDisplay = currentUser.Problem;

            var user = db.Users.First(u => u.Username == currentUser.Username);

            user.Exp = currentUser.Exp;
            user.ExpForNextLevel = currentUser.ExpForNextLevel;
            user.Level = currentUser.Level;
            user.Problem = currentUser.Problem;
            user.ProblemAnswer = currentUser.ProblemAnswer;
            user.ProblemScore = currentUser.ProblemScore;

            db.SaveChanges();

            userInput = "";
            msg = "";
        }
        else NotLoggedInAlert();     
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Update();
    }

    void NotLoggedInAlert()
    {
        msg = "Вы не авторизованы.";
    }
}